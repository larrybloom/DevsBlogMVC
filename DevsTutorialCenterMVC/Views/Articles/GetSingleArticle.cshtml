@using DevsTutorialCenterMVC.Utilities
@model SingleArticlePageVM;
@{
    var baseUrl = "https://localhost:7123";
    var token = User.Claims.FirstOrDefault(c => c.Type == "JwtToken")?.Value;
    var likedClass = "";
    var bookmarkedClass = "";
    if (Model.Article.Liked is true)
    {
        likedClass = "text-red-600 fill-red-600";
    }

    if (Model.Article.Bookmarked is true)
    {
        bookmarkedClass = "text-gray-900 fill-gray-900";
    }

    ViewData["Title"] = "Article";
}

<partial name="_LandingPageNavPartial"/>

<div class="container">
    <div class="flex mt-2 space-x-6 mb-10">
        <div class="w-full md:w-3/4">
            <div class="">
                <div class="h-[35rem] bg-cover bg-center" style="background-image: url('@Model.Article.ImageUrl')"></div>
                <div class="w-full px-6 bg-white">
                    <div class="z-50 w-full p-6 bg-white">
                        <div class="flex space-x-4 -mt-36 p-6 bg-white">
                            <div class="p-2 flex flex-col items-center">
                                <p id="likeCount" class="text-sm mb-1"></p>
                                <div class="flex justify-center items-center p-2 rounded-full border border-gray-200 mb-4">
                                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" width="24"
                                         height="24" stroke-width="1.5" stroke="currentColor" id="likeButton"
                                         class="@likedClass cursor-pointer">
                                        <path stroke-linecap="round" stroke-linejoin="round"
                                              d="M21 8.25c0-2.485-2.099-4.5-4.688-4.5-1.935 0-3.597 1.126-4.312 2.733-.715-1.607-2.377-2.733-4.313-2.733C5.1 3.75 3 5.765 3 8.25c0 7.22 9 12 9 12s9-4.78 9-12z"/>
                                    </svg>
                                </div>

                                <div class="flex justify-center items-center p-2 rounded-full border border-gray-200 mb-4">
                                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" width="24" height="24" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" id="bookmark" class="@bookmarkedClass cursor-pointer">
                                        <path stroke-linecap="round" stroke-linejoin="round" d="M17.593 3.322c1.1.128 1.907 1.077 1.907 2.185V21L12 17.25 4.5 21V5.507c0-1.108.806-2.057 1.907-2.185a48.507 48.507 0 0111.186 0z"/>
                                    </svg>
                                </div>
                            </div>
                            <div>
                                <div class="flex items-center space-x-4">
                                    <div
                                        class="inline-flex px-3 py-1 space-x-5 text-sm uppercase bg-gray-100 rounded-full text-slate-500">
                                        @Model.Article.TagName
                                    </div>
                                    <div class="w-4 border-t border-gray-300"></div>
                                    <div class="text-sm text-gray-500">@Model.Article.CreatedOn.FormatDate() </div>
                                </div>
                                <p class="mt-4 text-2xl font-medium">@Model.Article.Title</p>
                                <p class="mt-6">
                                    @Html.Raw(Model.Article.Text)
                                </p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>


            <div class="w-full mt-12">
                <p class="text-lg font-medium mb-2">Comments</p>
                <hr/>
                <div class="my-3 space-y-6">
                    @foreach (var comment in Model.Article.Comments)
                    {
                        <partial name="Components/_CommentItemPartial" model="@comment"/>
                    }
                </div>

                @* <button class="flex-inline mt-5 items-center justify-center rounded-lg bg-gray-100 px-6 py-3 text-green-600 font-semibold hover:bg-gray-200">Reply</button> *@

                <div class="mt-8">
                    <p class="text-lg font-medium mb-2">Leave a comment</p>
                    <hr/>
                    <partial name="Components/_AddCommentPartial" model="@Model.AddComment"/>
                </div>
            </div>
        </div>

        <div class="hidden md:block md:w-1/4">
            <div class="mb-8">
                <p class="font-semibold">AUTHORS</p>
                <div class="mt-2">
                    @foreach (var topAuthor in Model.Authors)
                    {
                        <partial name="Components/_AuthorListItemPartial" model="@topAuthor"/>
                    }
                </div>
            </div>
            <div class="mb-8">
                <p class="mb-2 font-semibold">INTERESTING TOPICS</p>
                @foreach (var tag in Model.Tags)
                {
                    <partial name="Components/_TagComponentPartial" model="@tag"/>
                }
            </div>
            <div>
                <p class="font-semibold">MORE ARTICLES</p>
                <div class="mt-2">
                    @foreach (var morePost in Model.MoreArticles)
                    {
                        <partial name="Components/_BlogPostRecommendationItemPartial" model="@morePost"/>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    const likeButton = document.querySelector('#likeButton');
    const likeCount = document.querySelector('#likeCount');
    const bookmarkButton = document.querySelector('#bookmark');
    let likeCountNumber = "@Model.Article.LikeCount";
    likeCount.innerHTML = likeCountNumber;
    
    function likeUnlikeArticle() {
        let url = "@baseUrl/api/article-likes"
        if (likeButton.classList.contains("text-red-600")) {
            url = url + "/unlike";
            likeCountNumber--;
        }
        else {
            url = url + "/like";
            likeCountNumber++;
        }
        url = url + "/@Model.Article.Id";

        fetch(url, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                Authorization: "Bearer @token"
            },
        })
            .then(response => {
                if (response.status === 200) {
                    likeCount.innerHTML = likeCountNumber;
                    likeButton.classList.toggle("text-red-600");
                    likeButton.classList.toggle("fill-red-600");
                }
            })
            .catch((error) => {
                console.log('Error:', error);
            });
    }
    
    function bookmarkArticle() {
        let url = "@baseUrl/api/article-bookmarks"
        if (bookmarkButton.classList.contains("text-gray-900")) {
            url = url + "/unbookmark";
        }
        else {
            url = url + "/bookmark";
        }
        url = url + "/@Model.Article.Id";

        fetch(url, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                Authorization: "Bearer @token"
            },
        })
            .then(response => {
                if (response.status === 200) {
                    bookmarkButton.classList.toggle("text-gray-900");
                    bookmarkButton.classList.toggle("fill-gray-900");
                }
            })
            .catch((error) => {
                console.log('Error:', error);
            });
    }

    likeButton.addEventListener('click', likeUnlikeArticle);
    bookmarkButton.addEventListener('click', bookmarkArticle);
</script>